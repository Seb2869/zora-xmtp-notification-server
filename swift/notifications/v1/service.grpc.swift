//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: notifications/v1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Notifications_V1_NotificationsClient`, then call methods of this protocol to make API calls.
public protocol Notifications_V1_NotificationsClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Notifications_V1_NotificationsClientInterceptorFactoryProtocol? { get }

  func registerInstallation(
    _ request: Notifications_V1_RegisterInstallationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Notifications_V1_RegisterInstallationRequest, Notifications_V1_RegisterInstallationResponse>

  func deleteInstallation(
    _ request: Notifications_V1_DeleteInstallationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Notifications_V1_DeleteInstallationRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func subscribe(
    _ request: Notifications_V1_SubscribeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Notifications_V1_SubscribeRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func subscribeWithMetadata(
    _ request: Notifications_V1_SubscribeWithMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Notifications_V1_SubscribeWithMetadataRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func unsubscribe(
    _ request: Notifications_V1_UnsubscribeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Notifications_V1_UnsubscribeRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

extension Notifications_V1_NotificationsClientProtocol {
  public var serviceName: String {
    return "notifications.v1.Notifications"
  }

  /// Unary call to RegisterInstallation
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterInstallation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func registerInstallation(
    _ request: Notifications_V1_RegisterInstallationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Notifications_V1_RegisterInstallationRequest, Notifications_V1_RegisterInstallationResponse> {
    return self.makeUnaryCall(
      path: Notifications_V1_NotificationsClientMetadata.Methods.registerInstallation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterInstallationInterceptors() ?? []
    )
  }

  /// Unary call to DeleteInstallation
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteInstallation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteInstallation(
    _ request: Notifications_V1_DeleteInstallationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Notifications_V1_DeleteInstallationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Notifications_V1_NotificationsClientMetadata.Methods.deleteInstallation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInstallationInterceptors() ?? []
    )
  }

  /// Unary call to Subscribe
  ///
  /// - Parameters:
  ///   - request: Request to send to Subscribe.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func subscribe(
    _ request: Notifications_V1_SubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Notifications_V1_SubscribeRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Notifications_V1_NotificationsClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }

  /// Unary call to SubscribeWithMetadata
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeWithMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func subscribeWithMetadata(
    _ request: Notifications_V1_SubscribeWithMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Notifications_V1_SubscribeWithMetadataRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Notifications_V1_NotificationsClientMetadata.Methods.subscribeWithMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeWithMetadataInterceptors() ?? []
    )
  }

  /// Unary call to Unsubscribe
  ///
  /// - Parameters:
  ///   - request: Request to send to Unsubscribe.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func unsubscribe(
    _ request: Notifications_V1_UnsubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Notifications_V1_UnsubscribeRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Notifications_V1_NotificationsClientMetadata.Methods.unsubscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnsubscribeInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Notifications_V1_NotificationsClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Notifications_V1_NotificationsNIOClient")
public final class Notifications_V1_NotificationsClient: Notifications_V1_NotificationsClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Notifications_V1_NotificationsClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Notifications_V1_NotificationsClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the notifications.v1.Notifications service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Notifications_V1_NotificationsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Notifications_V1_NotificationsNIOClient: Notifications_V1_NotificationsClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Notifications_V1_NotificationsClientInterceptorFactoryProtocol?

  /// Creates a client for the notifications.v1.Notifications service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Notifications_V1_NotificationsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Notifications_V1_NotificationsAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Notifications_V1_NotificationsClientInterceptorFactoryProtocol? { get }

  func makeRegisterInstallationCall(
    _ request: Notifications_V1_RegisterInstallationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Notifications_V1_RegisterInstallationRequest, Notifications_V1_RegisterInstallationResponse>

  func makeDeleteInstallationCall(
    _ request: Notifications_V1_DeleteInstallationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Notifications_V1_DeleteInstallationRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeSubscribeCall(
    _ request: Notifications_V1_SubscribeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Notifications_V1_SubscribeRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeSubscribeWithMetadataCall(
    _ request: Notifications_V1_SubscribeWithMetadataRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Notifications_V1_SubscribeWithMetadataRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeUnsubscribeCall(
    _ request: Notifications_V1_UnsubscribeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Notifications_V1_UnsubscribeRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Notifications_V1_NotificationsAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Notifications_V1_NotificationsClientMetadata.serviceDescriptor
  }

  public var interceptors: Notifications_V1_NotificationsClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeRegisterInstallationCall(
    _ request: Notifications_V1_RegisterInstallationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Notifications_V1_RegisterInstallationRequest, Notifications_V1_RegisterInstallationResponse> {
    return self.makeAsyncUnaryCall(
      path: Notifications_V1_NotificationsClientMetadata.Methods.registerInstallation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterInstallationInterceptors() ?? []
    )
  }

  public func makeDeleteInstallationCall(
    _ request: Notifications_V1_DeleteInstallationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Notifications_V1_DeleteInstallationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Notifications_V1_NotificationsClientMetadata.Methods.deleteInstallation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInstallationInterceptors() ?? []
    )
  }

  public func makeSubscribeCall(
    _ request: Notifications_V1_SubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Notifications_V1_SubscribeRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Notifications_V1_NotificationsClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }

  public func makeSubscribeWithMetadataCall(
    _ request: Notifications_V1_SubscribeWithMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Notifications_V1_SubscribeWithMetadataRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Notifications_V1_NotificationsClientMetadata.Methods.subscribeWithMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeWithMetadataInterceptors() ?? []
    )
  }

  public func makeUnsubscribeCall(
    _ request: Notifications_V1_UnsubscribeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Notifications_V1_UnsubscribeRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Notifications_V1_NotificationsClientMetadata.Methods.unsubscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnsubscribeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Notifications_V1_NotificationsAsyncClientProtocol {
  public func registerInstallation(
    _ request: Notifications_V1_RegisterInstallationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Notifications_V1_RegisterInstallationResponse {
    return try await self.performAsyncUnaryCall(
      path: Notifications_V1_NotificationsClientMetadata.Methods.registerInstallation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterInstallationInterceptors() ?? []
    )
  }

  public func deleteInstallation(
    _ request: Notifications_V1_DeleteInstallationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Notifications_V1_NotificationsClientMetadata.Methods.deleteInstallation.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInstallationInterceptors() ?? []
    )
  }

  public func subscribe(
    _ request: Notifications_V1_SubscribeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Notifications_V1_NotificationsClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }

  public func subscribeWithMetadata(
    _ request: Notifications_V1_SubscribeWithMetadataRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Notifications_V1_NotificationsClientMetadata.Methods.subscribeWithMetadata.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeWithMetadataInterceptors() ?? []
    )
  }

  public func unsubscribe(
    _ request: Notifications_V1_UnsubscribeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Notifications_V1_NotificationsClientMetadata.Methods.unsubscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnsubscribeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Notifications_V1_NotificationsAsyncClient: Notifications_V1_NotificationsAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Notifications_V1_NotificationsClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Notifications_V1_NotificationsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol Notifications_V1_NotificationsClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'registerInstallation'.
  func makeRegisterInstallationInterceptors() -> [ClientInterceptor<Notifications_V1_RegisterInstallationRequest, Notifications_V1_RegisterInstallationResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteInstallation'.
  func makeDeleteInstallationInterceptors() -> [ClientInterceptor<Notifications_V1_DeleteInstallationRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'subscribe'.
  func makeSubscribeInterceptors() -> [ClientInterceptor<Notifications_V1_SubscribeRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'subscribeWithMetadata'.
  func makeSubscribeWithMetadataInterceptors() -> [ClientInterceptor<Notifications_V1_SubscribeWithMetadataRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'unsubscribe'.
  func makeUnsubscribeInterceptors() -> [ClientInterceptor<Notifications_V1_UnsubscribeRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

public enum Notifications_V1_NotificationsClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Notifications",
    fullName: "notifications.v1.Notifications",
    methods: [
      Notifications_V1_NotificationsClientMetadata.Methods.registerInstallation,
      Notifications_V1_NotificationsClientMetadata.Methods.deleteInstallation,
      Notifications_V1_NotificationsClientMetadata.Methods.subscribe,
      Notifications_V1_NotificationsClientMetadata.Methods.subscribeWithMetadata,
      Notifications_V1_NotificationsClientMetadata.Methods.unsubscribe,
    ]
  )

  public enum Methods {
    public static let registerInstallation = GRPCMethodDescriptor(
      name: "RegisterInstallation",
      path: "/notifications.v1.Notifications/RegisterInstallation",
      type: GRPCCallType.unary
    )

    public static let deleteInstallation = GRPCMethodDescriptor(
      name: "DeleteInstallation",
      path: "/notifications.v1.Notifications/DeleteInstallation",
      type: GRPCCallType.unary
    )

    public static let subscribe = GRPCMethodDescriptor(
      name: "Subscribe",
      path: "/notifications.v1.Notifications/Subscribe",
      type: GRPCCallType.unary
    )

    public static let subscribeWithMetadata = GRPCMethodDescriptor(
      name: "SubscribeWithMetadata",
      path: "/notifications.v1.Notifications/SubscribeWithMetadata",
      type: GRPCCallType.unary
    )

    public static let unsubscribe = GRPCMethodDescriptor(
      name: "Unsubscribe",
      path: "/notifications.v1.Notifications/Unsubscribe",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Notifications_V1_NotificationsProvider: CallHandlerProvider {
  var interceptors: Notifications_V1_NotificationsServerInterceptorFactoryProtocol? { get }

  func registerInstallation(request: Notifications_V1_RegisterInstallationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Notifications_V1_RegisterInstallationResponse>

  func deleteInstallation(request: Notifications_V1_DeleteInstallationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func subscribe(request: Notifications_V1_SubscribeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func subscribeWithMetadata(request: Notifications_V1_SubscribeWithMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func unsubscribe(request: Notifications_V1_UnsubscribeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension Notifications_V1_NotificationsProvider {
  public var serviceName: Substring {
    return Notifications_V1_NotificationsServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterInstallation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Notifications_V1_RegisterInstallationRequest>(),
        responseSerializer: ProtobufSerializer<Notifications_V1_RegisterInstallationResponse>(),
        interceptors: self.interceptors?.makeRegisterInstallationInterceptors() ?? [],
        userFunction: self.registerInstallation(request:context:)
      )

    case "DeleteInstallation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Notifications_V1_DeleteInstallationRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteInstallationInterceptors() ?? [],
        userFunction: self.deleteInstallation(request:context:)
      )

    case "Subscribe":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Notifications_V1_SubscribeRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
        userFunction: self.subscribe(request:context:)
      )

    case "SubscribeWithMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Notifications_V1_SubscribeWithMetadataRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeSubscribeWithMetadataInterceptors() ?? [],
        userFunction: self.subscribeWithMetadata(request:context:)
      )

    case "Unsubscribe":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Notifications_V1_UnsubscribeRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnsubscribeInterceptors() ?? [],
        userFunction: self.unsubscribe(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Notifications_V1_NotificationsAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Notifications_V1_NotificationsServerInterceptorFactoryProtocol? { get }

  @Sendable func registerInstallation(
    request: Notifications_V1_RegisterInstallationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Notifications_V1_RegisterInstallationResponse

  @Sendable func deleteInstallation(
    request: Notifications_V1_DeleteInstallationRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  @Sendable func subscribe(
    request: Notifications_V1_SubscribeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  @Sendable func subscribeWithMetadata(
    request: Notifications_V1_SubscribeWithMetadataRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  @Sendable func unsubscribe(
    request: Notifications_V1_UnsubscribeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Notifications_V1_NotificationsAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Notifications_V1_NotificationsServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Notifications_V1_NotificationsServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Notifications_V1_NotificationsServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterInstallation":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Notifications_V1_RegisterInstallationRequest>(),
        responseSerializer: ProtobufSerializer<Notifications_V1_RegisterInstallationResponse>(),
        interceptors: self.interceptors?.makeRegisterInstallationInterceptors() ?? [],
        wrapping: self.registerInstallation(request:context:)
      )

    case "DeleteInstallation":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Notifications_V1_DeleteInstallationRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteInstallationInterceptors() ?? [],
        wrapping: self.deleteInstallation(request:context:)
      )

    case "Subscribe":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Notifications_V1_SubscribeRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
        wrapping: self.subscribe(request:context:)
      )

    case "SubscribeWithMetadata":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Notifications_V1_SubscribeWithMetadataRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeSubscribeWithMetadataInterceptors() ?? [],
        wrapping: self.subscribeWithMetadata(request:context:)
      )

    case "Unsubscribe":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Notifications_V1_UnsubscribeRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeUnsubscribeInterceptors() ?? [],
        wrapping: self.unsubscribe(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

public protocol Notifications_V1_NotificationsServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registerInstallation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterInstallationInterceptors() -> [ServerInterceptor<Notifications_V1_RegisterInstallationRequest, Notifications_V1_RegisterInstallationResponse>]

  /// - Returns: Interceptors to use when handling 'deleteInstallation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteInstallationInterceptors() -> [ServerInterceptor<Notifications_V1_DeleteInstallationRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'subscribe'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeInterceptors() -> [ServerInterceptor<Notifications_V1_SubscribeRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'subscribeWithMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeWithMetadataInterceptors() -> [ServerInterceptor<Notifications_V1_SubscribeWithMetadataRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'unsubscribe'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnsubscribeInterceptors() -> [ServerInterceptor<Notifications_V1_UnsubscribeRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

public enum Notifications_V1_NotificationsServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Notifications",
    fullName: "notifications.v1.Notifications",
    methods: [
      Notifications_V1_NotificationsServerMetadata.Methods.registerInstallation,
      Notifications_V1_NotificationsServerMetadata.Methods.deleteInstallation,
      Notifications_V1_NotificationsServerMetadata.Methods.subscribe,
      Notifications_V1_NotificationsServerMetadata.Methods.subscribeWithMetadata,
      Notifications_V1_NotificationsServerMetadata.Methods.unsubscribe,
    ]
  )

  public enum Methods {
    public static let registerInstallation = GRPCMethodDescriptor(
      name: "RegisterInstallation",
      path: "/notifications.v1.Notifications/RegisterInstallation",
      type: GRPCCallType.unary
    )

    public static let deleteInstallation = GRPCMethodDescriptor(
      name: "DeleteInstallation",
      path: "/notifications.v1.Notifications/DeleteInstallation",
      type: GRPCCallType.unary
    )

    public static let subscribe = GRPCMethodDescriptor(
      name: "Subscribe",
      path: "/notifications.v1.Notifications/Subscribe",
      type: GRPCCallType.unary
    )

    public static let subscribeWithMetadata = GRPCMethodDescriptor(
      name: "SubscribeWithMetadata",
      path: "/notifications.v1.Notifications/SubscribeWithMetadata",
      type: GRPCCallType.unary
    )

    public static let unsubscribe = GRPCMethodDescriptor(
      name: "Unsubscribe",
      path: "/notifications.v1.Notifications/Unsubscribe",
      type: GRPCCallType.unary
    )
  }
}
